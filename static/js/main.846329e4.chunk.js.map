{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Hit","_ref","hit","react_default","a","createElement","className","src","image","alt","price","dom","attribute","Sidebar","searchable","showMore","translations","hitsPerPage","Content","defaultRefinement","items","value","label","hitComponent","showLast","App","apiKey","appId","indexName","placeholder","App_Sidebar","App_Content","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAcMA,EAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,IAAF,OACJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAIM,MAAOC,IAAI,MAE3BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,IACIJ,EAAIQ,OAERP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACM,EAAA,UAAD,CAAWC,UAAU,OAAOV,IAAKA,QAKvCW,EAAQ,kBACRV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACM,EAAA,eAAD,CAAgBC,UAAU,eAC1BT,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACM,EAAA,eAAD,CAAgBC,UAAU,QAAQE,YAAU,IAC5CX,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACM,EAAA,KAAD,CAAMC,UAAU,OAAOG,UAAU,EAC3BC,aAAc,CACZD,SAAU,eAElBZ,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACM,EAAA,eAAD,CAAgBC,UAAU,SAC1BT,EAAAC,EAAAC,cAACM,EAAA,UAAD,CAAWM,YAAa,OAG1BC,EAAQ,kBAAIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACM,EAAA,MAAD,MACAR,EAAAC,EAAAC,cAACM,EAAA,OAAD,CAAQQ,kBAAkB,iBACjBC,MAAO,CACN,CAAEC,MAAO,iBAAkBC,MAAO,iBAClC,CAAED,MAAO,2BAA4BC,MAAO,gBAC5C,CAAED,MAAO,4BAA6BC,MAAO,qBAIzDnB,EAAAC,EAAAC,cAACM,EAAA,KAAD,CAAMY,aAAcvB,IACpBG,EAAAC,EAAAC,cAACM,EAAA,WAAD,CAAYa,UAAQ,MAuBzBC,mLAjBX,OACEtB,EAAAC,EAAAC,cAACM,EAAA,cAAD,CAAgBe,OAAO,mCACPC,MAAM,UACNC,UAAU,kBACxBzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKI,IAAI,sBAAsBF,IAAI,+BACnCJ,EAAAC,EAAAC,cAACM,EAAA,UAAD,CAAWL,UAAU,0BAA0BU,aAAc,CAACa,YAAa,0BAE7E1B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,eAbQC,aChDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.846329e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {InstantSearch,\n        SearchBox, \n        Hits, \n        Highlight,\n        Stats,\n        Pagination,\n        SortBy,\n        RefinementList,\n        Menu,\n        Configure\n      } from 'react-instantsearch/dom';\n\nconst Hit=({hit})=>\n      <div className=\"hit\">\n        <div className=\"hit-image\">\n          <img src={hit.image} alt=\"\"/>\n        </div>\n        <div className=\"hit-content\">\n          <div className=\"hit-price\">\n            ${hit.price}\n          </div>\n          <div className=\"hit-name\">\n            <Highlight attribute=\"name\" hit={hit} />\n          </div>         \n        </div>\n      </div>\n\nconst Sidebar=()=>\n      <div className=\"left-column\">\n        <h5>Category</h5>\n        <RefinementList attribute=\"categories\"/>\n        <h5>Brand</h5>\n        <RefinementList attribute=\"brand\" searchable />\n        <h5>Type</h5>\n        <Menu attribute=\"type\" showMore={true}\n              translations={{\n                showMore: 'Voir plus'\n        }}/>\n        <h5>Name</h5>\n        <RefinementList attribute=\"name\"/>\n        <Configure hitsPerPage={32} />  \n      </div>\n\nconst Content=()=><div className=\"right-column\">\n                    <div className=\"info\">\n                      <Stats/>\n                      <SortBy defaultRefinement=\"instant_search\"\n                               items={[\n                                { value: 'instant_search', label: 'Most Relevant' },\n                                { value: 'instant_search_price_asc', label: 'Lowest Price' },\n                                { value: 'instant_search_price_desc', label: 'Highest Price' },\n                              ]}\n                      />\n                    </div>\n                    <Hits hitComponent={Hit}/>\n                    <Pagination showLast />\n                  </div>\n\nclass App extends Component {\n\n  render() {\n    return (\n      <InstantSearch  apiKey=\"6be0576ff61c053d5f9a3225e2a90f76\"\n                      appId=\"latency\"\n                      indexName=\"instant_search\" >\n        <header className=\"header\">\n          <img alt=\"instant-search-logo\" src=\"instant_search_logo@2x.png\" />\n          <SearchBox className=\"ais-InstantSearch__root\" translations={{placeholder: 'Search for Products'}}/>\n        </header> \n        <main>\n          <Sidebar />\n          <Content/>\n        </main> \n      </InstantSearch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}